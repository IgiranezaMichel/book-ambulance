scalar LocalDateTime
scalar Long
type Location{
    id:ID
    name:String!
    type:String!
    location:Location
    locationList:[Location]
}
type User{
    id:ID
    name:String
    gender:String
    phoneNumber:String
    email:String
    password:String
    role:String
}
type Hospital{
 id:ID
 name:String
 location:Location   
}
type Booking{
    id:ID
    user:User
    bookingDate:LocalDateTime
}
input bookingInput{
    userId:Long
    bookingDate:LocalDateTime 
}
input userInput{
    identity:ID
    name:String
    gender:String
    phoneNumber:String
    email:String
    password:String
    role:String
}
input locationInput{
    id:String
    name:String
    type:String
    locationFk:Int
}
input HospitalInput{
    id:ID
    name:String
    locationId:String   
}
type Mutation{
 addUser(input:userInput):User
 deleteUser(id:ID):String
 addOrUpdateBooking(input:bookingInput):Booking
 deleteBookingById(id:Long):String
 addHospital(input:HospitalInput):Hospital
 deleteHospital(id:ID):String
 addLocation(input:locationInput):Location
 deleteLocation(id:String):String
}
type Query{
getAllUser:[User]
findUserById(id:Long):User
findBookingById(id:Long):Booking
getListOfLocationById(id:Long):[Location]
getAllProvince:[Location]
getAllLocation:[Location]
findLocationById(id:ID!):Location
getAllHospital:[Hospital]
getHospitalById(id:ID):Hospital
}